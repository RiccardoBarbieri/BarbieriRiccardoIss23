/* Generated by AN DISI Unibo */ 
package it.unibo.sonar23

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar23 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 var goon = true  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("${name} STARTS  ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="doActivate",cond=whenDispatch("sonaractivate"))
					transition(edgeName="t01",targetState="doDeactivate",cond=whenDispatch("sonardeactivate"))
				}	 
				state("doActivate") { //this:State
					action { //it:State
						 var D = 50 
								   for( i in 1..5){ 
						 		   	 CommUtils.outyellow( "${name} simulates $D")
								   	 emit( "sonardata", "distance( $D )" )
								   	 delay(500)
								   	 D = D - 5
								   }
								   for( i in 1..5){ 
								   	CommUtils.outyellow( "${name} simulates $D")
								   	emit( "sonardata",  "distance( $D )" )
								   	delay(500)
								   	D = D + 5
								   }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("doDeactivate") { //this:State
					action { //it:State
						CommUtils.outblack("${name} ENDS  ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
